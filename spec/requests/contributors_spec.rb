 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contributors", type: :request do
  let(:current_user) {
    email = 'foo@test.com'
    password = 'test123456'
    User.create(email: email, password: password)
  }
  let(:project_owner) { current_user }
  before do
    sign_in current_user
  end
  let(:project) do
    project = Project.new(name: 'foo', budget: 1000)
    project_owner.add_project(project)
    project
  end

  let(:contributing_user) { User.create(email: 'contrib@foo.com', password: 'test123456') }
  let(:valid_attributes) {{
    user_id: contributing_user.id
  }}

  let(:invalid_attributes) {{
    user_id: -1
  }}

  describe "GET /new" do
    it "renders a successful response" do
      get new_project_contributor_url(project)
      expect(response).to be_successful
    end
  end


  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Contributor" do
        expect {
          post project_contributors_url(project), params: { contributor: { user: { email: contributing_user.email} }}
        }.to change(Contributor, :count).by(1)
      end

      it "redirects to the created contributor" do
        post project_contributors_url(project), params: { contributor: { user: { email: contributing_user.email} }}
        expect(response).to redirect_to(edit_project_path(project))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Contributor" do
        expect {
          post project_contributors_url(project), params: { contributor: { user: { email: 'bad'} }}
        }.to change(Contributor, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post project_contributors_url(project), params: { contributor: { user: { email: 'bad'} }}
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested contributor" do
      contributor = project.contributors.create! valid_attributes
      expect {
        delete project_contributor_url(project, contributor)
      }.to change(Contributor, :count).by(-1)
    end

    it "redirects to the contributors list" do
      contributor = project.contributors.create! valid_attributes
      delete project_contributor_url(project, contributor)
      expect(response).to redirect_to(edit_project_url(project))
    end
  end
end
