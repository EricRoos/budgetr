# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/projects', type: :request do
  let(:current_user) do
    email = 'foo@test.com'
    password = 'test123456'
    User.create(email: email, password: password)
  end

  let(:project_owner) { current_user }

  before do
    sign_in current_user
  end

  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: 'Valid Attributes',
      budget: 1500,
    }
  end

  let(:invalid_attributes) do
    {
      name: 'Foo',
      budget: -1500,
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      current_user.add_project(Project.new(valid_attributes))
      get projects_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      project = Project.new(valid_attributes)
      current_user.add_project(project)
      get project_url(project)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_project_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      project = Project.new(valid_attributes)
      current_user.add_project(project)
      get edit_project_url(project)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Project' do
        expect do
          post projects_url, params: { project: valid_attributes }
        end.to change(Project, :count).by(1)
      end

      it 'redirects to the created project' do
        post projects_url, params: { project: valid_attributes }
        expect(response).to redirect_to(project_url(Project.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Project' do
        expect do
          post projects_url, params: { project: invalid_attributes }
        end.to change(Project, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post projects_url, params: { project: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'updated', budget: 1000 }
      end

      it 'updates the requested project' do
        project = Project.create! valid_attributes
        current_user.add_project(project)
        patch project_url(project), params: { project: new_attributes }
        project.reload
        expect(response).to redirect_to(project_url(project))
      end

      it 'redirects to the project' do
        project = Project.create! valid_attributes
        current_user.add_project(project)
        expect do
          patch project_url(project), params: { project: new_attributes }
        end.to change { project.reload.as_json }
        expect(response).to redirect_to(project_url(project))
      end

      context 'when not logged in as project owner' do
        let(:project_owner) { User.create(email: 'other@test.com', password: 'test1234556') }

        it 'does not update the project' do
          project = Project.create! valid_attributes
          project_owner.add_project(project)
          expect do
            patch project_url(project), params: { project: new_attributes }
          end.not_to change { project.reload.as_json }
        end
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        project = Project.create! valid_attributes
        current_user.add_project(project)
        patch project_url(project), params: { project: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested project' do
      project = Project.create! valid_attributes
      project_owner.add_project(project)
      expect do
        delete project_url(project)
      end.to change(Project, :count).by(-1)
    end

    it 'redirects to the projects list' do
      project = Project.create! valid_attributes
      project_owner.add_project(project)
      delete project_url(project)
      expect(response).to redirect_to(projects_url)
    end

    context 'when not logged in as project owner' do
      let(:project_owner) { User.create(email: 'other@test.com', password: 'test1234556') }

      it 'does not delete the project' do
        project = Project.create! valid_attributes
        project_owner.add_project(project)
        expect do
          delete project_url(project)
        end.to change(Project, :count).by(0)
      end
    end
  end
end
